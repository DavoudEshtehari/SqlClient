// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;

namespace Microsoft.Data.SqlClient
{
    /// <summary>
    /// It retrieves next time interval with respect to the number of retries if transient condition happens.
    /// </summary>
    public abstract class SqlRetryLogicBase
    {
        /// <summary>
        /// Number of retries.
        /// </summary>
        public int NumberOfTries { get; protected set; }

        /// <summary>
        /// Current retry number.
        /// </summary>
        public int Current { get; protected set; }

        /// <summary>
        /// The timer interval enumerator.
        /// </summary>
        public SqlRetryIntervalBaseEnumerator RetryIntervalEnumerator { get; protected set; }

        /// <summary>
        /// Delegate to a transient condition predicator.
        /// The function that this delegate points to it must return a true value when an expected transient exception happens.
        /// </summary>
        public Predicate<Exception> TransientPredicate { get; protected set; }

        /// <summary>
        /// Pre-retry validation regarding to the sender state.
        /// </summary>
        /// <param name="sender">Sender object</param>
        /// <returns>True if the sender is authorized to retry the operation</returns>
        public virtual bool RetryCondition(object sender) => true;

        /// <summary>
        /// Try to get the next interval time by the enumerator if the counter does not exceed from the number of retries.
        /// </summary>
        /// <param name="intervalTime">The interval time that is generated by the enumerator</param>
        /// <returns>True if the number of retries does not exceed unless False</returns>
        public abstract bool TryNextInterval(out TimeSpan intervalTime);

        /// <summary>
        /// Set the counters and enumerator to default values for next use.
        /// </summary>
        public abstract void Reset();
    }
}
